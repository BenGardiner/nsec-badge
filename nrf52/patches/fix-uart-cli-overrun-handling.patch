diff -up uart.orig/nrf_cli_uart.c ./nordicsdk/libraries/cli/uart/nrf_cli_uart.c
--- ./nordicsdk/libraries/cli/uart/nrf_cli_uart.c	2017-11-14 22:13:52.000000000 -0500
+++ ./nordicsdk/libraries/cli/uart/nrf_cli_uart.c	2019-04-07 13:09:23.267992806 -0400
@@ -63,15 +63,24 @@ static ret_code_t rx_try(nrf_cli_uart_in
     err_code = nrf_ringbuf_alloc(p_internal->p_rx_ringbuf, &p_data, &len, true);
     ASSERT(err_code == NRF_SUCCESS);
 
-    if ((err_code == NRF_SUCCESS) && len)
+    if (err_code == NRF_SUCCESS)
     {
-        err_code = nrf_drv_uart_rx(p_internal->p_uart, p_data, len);
+        if (len > 0)
+        {
+            err_code = nrf_drv_uart_rx(p_internal->p_uart, p_data, len);
 
-        if (err_code == NRF_SUCCESS)
+            if (err_code == NRF_SUCCESS)
+            {
+                err_code = app_timer_start(*p_internal->p_timer,
+                                            APP_TIMER_TICKS(CLI_UART_RX_TIMEOUT),
+                                            p_internal);
+            }
+        }
+        else
         {
-            err_code = app_timer_start(*p_internal->p_timer,
-                                        APP_TIMER_TICKS(CLI_UART_RX_TIMEOUT),
-                                        p_internal);
+            // There is no room in the buffer, disable the receive until the
+            // next time data is consume from it.
+            p_internal->p_cb->rx_ringbuf_full = true;
         }
     }
 
@@ -160,6 +169,7 @@ static ret_code_t cli_uart_init(nrf_cli_
     p_internal->p_cb->p_context = p_context;
     p_internal->p_cb->timer_created = false;
     p_internal->p_cb->blocking      = false;
+    p_internal->p_cb->rx_ringbuf_full = false;
 
     nrf_drv_uart_config_t * p_uart_config = (nrf_drv_uart_config_t *)p_config;
     memcpy(&p_internal->p_cb->uart_config, p_uart_config, sizeof(nrf_drv_uart_config_t));
@@ -252,6 +262,14 @@ static ret_code_t cli_uart_read(nrf_cli_
     *p_cnt = length;
     ret_code_t err_code = nrf_ringbuf_cpy_get(p_instance->p_rx_ringbuf, p_data, p_cnt);
 
+    // If the buffer was previously full, we have just made it not full by
+    // reading from it, so kick off a new receive operation.
+    if (p_instance->p_cb->rx_ringbuf_full)
+    {
+        p_instance->p_cb->rx_ringbuf_full = false;
+        rx_try(p_instance);
+    }
+
     if (*p_cnt)
     {
         NRF_LOG_INFO("id:%d, read:%d", p_instance->p_uart->drv_inst_idx, *p_cnt);
diff -up uart.orig/nrf_cli_uart.h ./nordicsdk/libraries/cli/uart/nrf_cli_uart.h
--- ./nordicsdk/libraries/cli/uart/nrf_cli_uart.h	2017-11-14 22:13:52.000000000 -0500
+++ ./nordicsdk/libraries/cli/uart/nrf_cli_uart.h	2019-04-07 13:09:18.704580764 -0400
@@ -71,6 +71,7 @@ typedef struct {
     nrf_drv_uart_config_t         uart_config;
     bool                          timer_created;
     bool                          blocking;
+    bool                          rx_ringbuf_full;
 } nrf_cli_uart_internal_cb_t;
 
 struct nrf_cli_uart_internal_s {
